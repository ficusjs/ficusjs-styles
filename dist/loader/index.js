window.__ficusjs__=window.__ficusjs__||{},window.__ficusjs__.styles=window.__ficusjs__.styles||{};function processStyle(e){if(/http[s]?:\/\/.+\.css$/.test(e)){const t=document.createElement("link");return t.rel="stylesheet",t.type="text/css",t.href=e,void document.head.appendChild(t)}return/.+\.css$/.test(e)?window.fetch(e).then((e=>e.text())):e}function createAndInjectStylesheet(e,t){const s=function(e){const t=document.createElement("style");return t.appendChild(document.createTextNode(e)),t}(e);!function(e,t){t&&Object.keys(t).forEach((s=>{e.setAttribute(s,t[s])}))}(s,t),document.head.appendChild(s),window.__ficusjs__.styles["ficusjs-styles"]={loaded:!0,style:s}}function loadStyles(e=[]){if("undefined"!=typeof window){if(window.__ficusjs__&&window.__ficusjs__.styles&&window.__ficusjs__.styles["ficusjs-styles"])return;if(Array.isArray(e)&&e.filter((e=>"string"!=typeof e)).length||!Array.isArray(e)&&"string"!=typeof e)return void console.error("Dude, styles must return a string or an array of strings!");let t="";Array.isArray(e)?Promise.all(e.map((e=>processStyle(e)))).then((e=>{t=e.filter((e=>e)).join("\n"),createAndInjectStylesheet(t,{"data-tag":"ficusjs-styles"})})):processStyle(e).then((e=>createAndInjectStylesheet(e,{"data-tag":"ficusjs-styles"})))}}export{loadStyles};
